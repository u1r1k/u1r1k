import os
import logging
import asyncio
# –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã...

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–∞–ª–µ–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
#!/usr/bin/env python3
"""
–ú–æ—â–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã 24/7
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import asyncio
import signal
import sys
import os
import time
import logging
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from telegram.error import NetworkError, TelegramError

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã 24/7
from bot.handlers import BotHandlers as BaseHandlers
from bot.monitors import HeartbeatMonitor
from bot.error_handler import ErrorHandler
from utils.logger import setup_logger
from utils.config import Config

# –ò–º–ø–æ—Ä—Ç keep_alive
from keep_alive import keep_alive

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
class AudioDownloader:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AudioDownloader —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def search_tracks(self, query: str, limit: int = 5):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        mock_tracks = [
            {
                'id': f'track_{i}',
                'title': f'{query} - Track {i+1}',
                'uploader': f'Artist {i+1}',
                'duration': f'{random.randint(2,5)}:{random.randint(10,59):02d}'
            }
            for i in range(min(limit, 3))
        ]
        return mock_tracks
    
    def download_track(self, track_id: str, title: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        logger.info(f"Downloading track: {title}")
        return None  # –í–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 1979411532
BOT_LINK = "https://t.me/music6383"
DEFAULT_SEARCH_RESULTS = 5

class MusicTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 24/7"""
    
    def __init__(self):
        self.config = Config()
        self.logger = setup_logger("MusicBot")
        self.application = None
        self.monitor = None
        self.error_handler = None
        self.is_running = False
        self.restart_count = 0
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        self.downloader = AudioDownloader()
        self.user_search_results = {}
        self.subscribers = set()
        self.user_favorites = {}
        self.user_language = {}
        
    def get_main_keyboard(self, is_admin=False, lang='ru'):
        if lang == 'en':
            keyboard = [
                ["üéµ Search Music", "üìÇ My Library"],
                ["‚≠ê Top Charts", "‚ù§Ô∏è Favorites"],
                ["üé≤ Random Song", "üîß Settings"],
                ["üìä Statistics", "üÜò Help"]
            ]
            if is_admin:
                keyboard.append(["‚öôÔ∏è Admin Panel"])
        else:
            keyboard = [
                ["üéµ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", "üìÇ –ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
                ["‚≠ê –¢–æ–ø —á–∞—Ä—Ç—ã", "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
                ["üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
                ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
            ]
            if is_admin:
                keyboard.append(["‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"])
                
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def get_search_inline_keyboard(self, tracks, lang='ru'):
        keyboard = []
        for i, track in enumerate(tracks):
            keyboard.append([InlineKeyboardButton(
                f"üéµ {track['title'][:30]}..." if len(track['title']) > 30 else f"üéµ {track['title']}", 
                callback_data=f"download_{i}"
            )])
        
        if lang == 'en':
            keyboard.append([InlineKeyboardButton("‚ù§Ô∏è Add to Favorites", callback_data="add_favorite")])
            keyboard.append([InlineKeyboardButton("üîÑ New Search", callback_data="new_search")])
        else:
            keyboard.append([InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")])
            keyboard.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
            
        return InlineKeyboardMarkup(keyboard)

    def get_settings_keyboard(self, lang='ru'):
        if lang == 'en':
            keyboard = [
                [InlineKeyboardButton("üåç Language: English", callback_data="lang_ru")],
                [InlineKeyboardButton("üîä Audio Quality: High", callback_data="quality_toggle")],
                [InlineKeyboardButton("üîî Notifications: ON", callback_data="notif_toggle")],
                [InlineKeyboardButton("üóëÔ∏è Clear History", callback_data="clear_history")],
                [InlineKeyboardButton("‚¨ÖÔ∏è Back to Menu", callback_data="back_menu")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π", callback_data="lang_en")],
                [InlineKeyboardButton("üîä –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ", callback_data="quality_toggle")],
                [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ", callback_data="notif_toggle")],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
            ]
        return InlineKeyboardMarkup(keyboard)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.config.bot_token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã 24/7
            self.monitor = HeartbeatMonitor(self.logger)
            self.error_handler = ErrorHandler(self.logger)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("stats", self.show_stats))
            self.application.add_handler(CommandHandler("broadcast", self.broadcast_message))
            self.application.add_handler(CallbackQueryHandler(self.handle_button_callback))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self.error_handler.handle_error)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
            
            self.logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üü¢ –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_task = asyncio.create_task(self.monitor.start_monitoring())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                allowed_updates=["message", "callback_query"],
                drop_pending_updates=True
            )
            
            bot_info = await self.application.bot.get_me()
            self.logger.info(f"üéØ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! Username: @{bot_info.username}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            while self.is_running:
                await asyncio.sleep(1)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            self.logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
            self.is_running = False
            
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                
            if self.monitor:
                await self.monitor.stop_monitoring()
                
            self.logger.info("‚úÖ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False

    # –í—Å–µ –º–µ—Ç–æ–¥—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.subscribers.add(user.id)
        lang = self.user_language.get(user.id, 'ru')
        
        welcome_text = {
            'ru': f"üéµ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\nüéß –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –ª—é–±—É—é –º—É–∑—ã–∫—É!\n\nüí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
            'en': f"üéµ Hello, {user.first_name}!\n\nüéß I'll help you find and download any music!\n\nüí° Just send a song title or use the buttons below:"
        }
        
        await update.message.reply_text(
            welcome_text[lang],
            reply_markup=self.get_main_keyboard(is_admin=user.id == ADMIN_ID, lang=lang)
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        help_text = {
            'ru': """üÜò **–ü–û–ú–û–©–¨**

üéµ **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "Believer Imagine Dragons"

üéØ **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è–π –ø–µ—Å–Ω–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è

ü§ñ **–§–∏—à–∫–∏:**
‚Ä¢ –°–ª—É—á–∞–π–Ω–∞—è –º—É–∑—ã–∫–∞ üé≤
‚Ä¢ –¢–æ–ø —á–∞—Ä—Ç—ã ‚≠ê
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìÇ

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ 24/7:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤""",
            'en': """üÜò **HELP**

üéµ **Music Search:**
‚Ä¢ Send song title
‚Ä¢ Example: "Believer Imagine Dragons"

üéØ **Commands:**
‚Ä¢ /start - Main menu
‚Ä¢ /help - This help
‚Ä¢ /stats - Your statistics

üí° **Tips:**
‚Ä¢ Use exact titles
‚Ä¢ Specify artist for better results
‚Ä¢ Add songs to favorites ‚ù§Ô∏è

ü§ñ **Features:**
‚Ä¢ Random music üé≤
‚Ä¢ Top charts ‚≠ê
‚Ä¢ Personal library üìÇ

üõ°Ô∏è **24/7 System:**
‚Ä¢ Auto recovery
‚Ä¢ Work monitoring
‚Ä¢ Error protection"""
        }
        
        await update.message.reply_text(help_text[lang], parse_mode='Markdown')

    async def handle_button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        await query.answer()
        
        if query.data.startswith("download_"):
            await self.download_by_callback(update, context)
        elif query.data == "add_favorite":
            await self.add_to_favorites(update, context)
        elif query.data == "new_search":
            text = "üîç –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏:" if lang == 'ru' else "üîç Send new song title:"
            await query.edit_message_text(text)
        elif query.data.startswith("lang_"):
            await self.change_language(update, context)
        elif query.data == "quality_toggle":
            text = "üîä –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ!" if lang == 'ru' else "üîä Quality changed!"
            await query.edit_message_text(text)
        elif query.data == "notif_toggle":
            text = "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω—ã!" if lang == 'ru' else "üîî Notification settings changed!"
            await query.edit_message_text(text)
        elif query.data == "clear_history":
            if user_id in self.user_search_results:
                del self.user_search_results[user_id]
            text = "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!" if lang == 'ru' else "üóëÔ∏è History cleared!"
            await query.edit_message_text(text)
        elif query.data == "back_menu":
            text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == 'ru' else "üè† Main menu:"
            await query.edit_message_text(text, reply_markup=None)

    async def download_by_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        if user_id not in self.user_search_results:
            text = "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –ø–µ—Å–Ω—é!" if lang == 'ru' else "‚ùó Search for a song first!"
            await query.edit_message_text(text)
            return

        try:
            idx = int(query.data.split("_")[1])
            tracks = self.user_search_results[user_id]
            
            if not 0 <= idx < len(tracks):
                text = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!" if lang == 'ru' else "‚ö†Ô∏è Invalid selection!"
                await query.edit_message_text(text)
                return

            track = tracks[idx]
            loading_text = f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é: {track['title']}" if lang == 'ru' else f"‚¨áÔ∏è Downloading: {track['title']}"
            await query.edit_message_text(loading_text)

            filepath = self.downloader.download_track(track['id'], track['title'])
            if filepath:
                with open(filepath, "rb") as audio:
                    caption = f"üéµ {track['title']}\nüë§ {track['uploader']}\n\nü§ñ –ú—É–∑—ã–∫–∞ –æ—Ç –±–æ—Ç–∞ {BOT_LINK}"
                    await context.bot.send_audio(
                        chat_id=query.message.chat_id,
                        audio=audio,
                        title=track['title'],
                        performer=track['uploader'],
                        caption=caption
                    )
                
                success_text = "‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π! üéß" if lang == 'ru' else "‚úÖ Done! Enjoy the music! üéß"
                await query.edit_message_text(success_text)
                
                try:
                    os.remove(filepath)
                except:
                    pass
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                success_text = f"‚úÖ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω: {track['title']}\n(–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è)" if lang == 'ru' else f"‚úÖ Track found: {track['title']}\n(Demo mode - no actual download)"
                await query.edit_message_text(success_text)
        except Exception as e:
            self.logger.error(f"Callback download error: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ." if lang == 'ru' else "‚ùå Download error."
            await query.edit_message_text(error_text)

    async def add_to_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        if user_id not in self.user_favorites:
            self.user_favorites[user_id] = []
        
        if user_id in self.user_search_results and self.user_search_results[user_id]:
            track = self.user_search_results[user_id][0]
            if track not in self.user_favorites[user_id]:
                self.user_favorites[user_id].append(track)
                text = f"‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!" if lang == 'ru' else f"‚ù§Ô∏è Added to favorites!"
            else:
                text = "‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!" if lang == 'ru' else "‚ö†Ô∏è Already in favorites!"
        else:
            text = "‚ùó –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!" if lang == 'ru' else "‚ùó No tracks to add!"
            
        await query.edit_message_text(text)

    async def change_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        
        new_lang = query.data.split("_")[1]
        self.user_language[user_id] = new_lang
        
        if new_lang == 'en':
            text = "üá∫üá∏ Language changed to English!"
        else:
            text = "üá∑üá∫ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!"
            
        await query.edit_message_text(text, reply_markup=self.get_settings_keyboard(new_lang))

    async def search_music(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        query = update.message.text.strip()
        lang = self.user_language.get(user_id, 'ru')

        if not query or query.startswith("/"):
            return

        search_text = f"üîé –ò—â—É: {query}" if lang == 'ru' else f"üîé Searching: {query}"
        msg = await update.message.reply_text(search_text)
        
        try:
            tracks = self.downloader.search_tracks(query, DEFAULT_SEARCH_RESULTS)
            if not tracks:
                no_results = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å." if lang == 'ru' else "‚ùå Nothing found. Try another search."
                await msg.edit_text(no_results)
                return

            self.user_search_results[user_id] = tracks
            
            result_text = "üé∂ –ù–∞–π–¥–µ–Ω–æ:\n\n" if lang == 'ru' else "üé∂ Found:\n\n"
            for i, track in enumerate(tracks):
                result_text += f"{i+1}. üéµ {track['title']}\n"
                result_text += f"   üë§ {track['uploader']} | ‚è∞ {track['duration']}\n\n"

            instruction = "üëá –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:" if lang == 'ru' else "üëá Select track with button below:"
            result_text += instruction

            await msg.edit_text(
                result_text,
                reply_markup=self.get_search_inline_keyboard(tracks, lang)
            )
        except Exception as e:
            self.logger.error(f"Search error: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ." if lang == 'ru' else "‚ùå Search error. Try later."
            await msg.edit_text(error_text)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text.strip()
        lang = self.user_language.get(user_id, 'ru')

        button_handlers = {
            "üéµ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏": lambda: update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:"),
            "üìÇ –ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞": self.show_library,
            "‚≠ê –¢–æ–ø —á–∞—Ä—Ç—ã": self.show_top_charts,
            "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ": self.show_favorites,
            "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è": self.random_song,
            "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏": self.show_settings,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": self.show_stats,
            "üÜò –ü–æ–º–æ—â—å": self.help_command,
            "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å": self.admin_panel,
            
            "üéµ Search Music": lambda: update.message.reply_text("üîç Send song title:"),
            "üìÇ My Library": self.show_library,
            "‚≠ê Top Charts": self.show_top_charts,
            "‚ù§Ô∏è Favorites": self.show_favorites,
            "üé≤ Random Song": self.random_song,
            "üîß Settings": self.show_settings,
            "üìä Statistics": self.show_stats,
            "üÜò Help": self.help_command,
            "‚öôÔ∏è Admin Panel": self.admin_panel,
        }

        if text in button_handlers:
            return await button_handlers[text](update, context)
        elif text.isdigit():
            return await self.download_by_number(update, context)
        else:
            return await self.search_music(update, context)

    async def show_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        searches = len(self.user_search_results.get(user_id, []))
        favorites = len(self.user_favorites.get(user_id, []))
        
        text = f"üìÇ **–¢–≤–æ—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:**\n\nüéµ –ü–æ–∏—Å–∫–æ–≤: {searches}\n‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {favorites}\nüìà –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–∞" if lang == 'ru' else f"üìÇ **Your music library:**\n\nüéµ Searches: {searches}\n‚ù§Ô∏è Favorite tracks: {favorites}\nüìà History active"
        await update.message.reply_text(text, parse_mode='Markdown')

    async def show_top_charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        lang = self.user_language.get(update.effective_user.id, 'ru')
        
        top_songs = [
            "üèÜ Imagine Dragons - Believer",
            "ü•à Ed Sheeran - Shape of You", 
            "ü•â The Weeknd - Blinding Lights",
            "4Ô∏è‚É£ Dua Lipa - Levitating",
            "5Ô∏è‚É£ Post Malone - Circles"
        ]
        
        text = "‚≠ê **–¢–û–ü –ß–ê–†–¢–´:**\n\n" + "\n".join(top_songs) if lang == 'ru' else "‚≠ê **TOP CHARTS:**\n\n" + "\n".join(top_songs)
        await update.message.reply_text(text, parse_mode='Markdown')

    async def show_favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        if user_id not in self.user_favorites or not self.user_favorites[user_id]:
            text = "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.\n–î–æ–±–∞–≤—å –ø–µ—Å–Ω–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!" if lang == 'ru' else "‚ù§Ô∏è Favorites empty.\nAdd songs to favorites when searching!"
        else:
            text = "‚ù§Ô∏è **–ò–ó–ë–†–ê–ù–ù–û–ï:**\n\n" if lang == 'ru' else "‚ù§Ô∏è **FAVORITES:**\n\n"
            for i, track in enumerate(self.user_favorites[user_id][:10]):
                text += f"{i+1}. üéµ {track['title']}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def random_song(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        lang = self.user_language.get(update.effective_user.id, 'ru')
        
        random_queries = ["popular music", "top hits 2024", "best songs", "trending music", "viral songs"]
        query = random.choice(random_queries)
        
        msg_text = "üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é..." if lang == 'ru' else "üé≤ Finding random song..."
        msg = await update.message.reply_text(msg_text)
        
        try:
            tracks = self.downloader.search_tracks(query, 1)
            if tracks:
                track = tracks[0]
                self.user_search_results[update.effective_user.id] = tracks
                
                text = f"üé≤ **–°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è:**\n\nüéµ {track['title']}\nüë§ {track['uploader']}\n‚è∞ {track['duration']}" if lang == 'ru' else f"üé≤ **Random song:**\n\nüéµ {track['title']}\nüë§ {track['uploader']}\n‚è∞ {track['duration']}"
                
                keyboard = [[InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å" if lang == 'ru' else "‚¨áÔ∏è Download", callback_data="download_0")]]
                await msg.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
            else:
                error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é." if lang == 'ru' else "‚ùå Failed to find random song."
                await msg.edit_text(error_text)
        except Exception as e:
            self.logger.error(f"Random song error: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ." if lang == 'ru' else "‚ùå Search error."
            await msg.edit_text(error_text)

    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        text = "üîß **–ù–ê–°–¢–†–û–ô–ö–ò:**" if lang == 'ru' else "üîß **SETTINGS:**"
        await update.message.reply_text(
            text, 
            reply_markup=self.get_settings_keyboard(lang),
            parse_mode='Markdown'
        )

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        searches = len(self.user_search_results.get(user_id, []))
        favorites = len(self.user_favorites.get(user_id, []))
        
        if lang == 'ru':
            text = f"""üìä **–¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**

üîç –ü–æ–∏—Å–∫–æ–≤: {searches}
‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites}
üéµ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {searches * 2}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: –ú–µ–ª–æ–º–∞–Ω
üéØ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ 24/7:**
‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ –≤–∫–ª—é—á–µ–Ω–∞"""
        else:
            text = f"""üìä **YOUR STATISTICS:**

üîç Searches: {searches}
‚ù§Ô∏è Favorites: {favorites}
üéµ Activity: {searches * 2}
‚≠ê Rating: Music Lover
üéØ Status: Active

üõ°Ô∏è **24/7 System:**
‚úÖ Auto-recovery working
‚úÖ Monitoring active
‚úÖ Error protection enabled"""
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            return
            
        lang = self.user_language.get(update.effective_user.id, 'ru')
        
        uptime = datetime.now() - self.monitor.start_time if self.monitor else datetime.now()
        uptime_str = str(uptime).split('.')[0]
        
        if lang == 'ru':
            text = f"""‚öôÔ∏è **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨:**

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribers)}
üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(self.user_search_results)}
‚ù§Ô∏è –û–±—â–µ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {sum(len(favs) for favs in self.user_favorites.values())}
üìä –Ø–∑—ã–∫–∏: RU={sum(1 for l in self.user_language.values() if l=='ru')}, EN={sum(1 for l in self.user_language.values() if l=='en')}

üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ 24/7:**
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}
üíö –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω
üîÑ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –†–∞–±–æ—Ç–∞–µ—Ç

ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!"""
        else:
            text = f"""‚öôÔ∏è **ADMIN PANEL:**

üë• Subscribers: {len(self.subscribers)}
üîç Active searches: {len(self.user_search_results)}
‚ù§Ô∏è Total favorites: {sum(len(favs) for favs in self.user_favorites.values())}
üìä Languages: RU={sum(1 for l in self.user_language.values() if l=='ru')}, EN={sum(1 for l in self.user_language.values() if l=='en')}

üõ°Ô∏è **24/7 System:**
‚è∞ Uptime: {uptime_str}
üíö Monitoring: Active
üîÑ Auto-recovery: Working

ü§ñ Bot working stable!"""
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞" if lang == 'ru' else "üì¢ Broadcast", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == 'ru' else "üìä Statistics", callback_data="admin_stats")]
        ]
        
        await update.message.reply_text(
            text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            return
            
        lang = self.user_language.get(update.effective_user.id, 'ru')
        
        if not context.args:
            text = "‚ùå –§–æ—Ä–º–∞—Ç: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]" if lang == 'ru' else "‚ùå Format: /broadcast [message]"
            await update.message.reply_text(text)
            return
            
        broadcast_text = " ".join(context.args)
        
        if len(broadcast_text) > 4000:
            text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤." if lang == 'ru' else "‚ùå Message too long! Max 4000 characters."
            await update.message.reply_text(text)
            return
        
        header = "üì¢ **–†–ê–°–°–´–õ–ö–ê –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**\n\n" if lang == 'ru' else "üì¢ **BROADCAST FROM ADMIN:**\n\n"
        final_message = header + broadcast_text + f"\n\nü§ñ {BOT_LINK}"
        
        sent_count = 0
        failed_count = 0
        
        status_msg = await update.message.reply_text(
            f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(self.subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..." if lang == 'ru' 
            else f"üì§ Starting broadcast for {len(self.subscribers)} users..."
        )
        
        for user_id in list(self.subscribers):
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=final_message,
                    parse_mode='Markdown'
                )
                sent_count += 1
                
                if sent_count % 10 == 0:
                    await status_msg.edit_text(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(self.subscribers)}" if lang == 'ru'
                        else f"üì§ Sent: {sent_count}/{len(self.subscribers)}"
                    )
                    
            except Exception as e:
                failed_count += 1
                if "blocked" in str(e).lower() or "not found" in str(e).lower():
                    self.subscribers.discard(user_id)
                self.logger.error(f"Broadcast error for user {user_id}: {e}")
        
        if lang == 'ru':
            final_text = f"""‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.subscribers)}"""
        else:
            final_text = f"""‚úÖ **BROADCAST COMPLETED!**

üìä Statistics:
‚Ä¢ Sent: {sent_count}
‚Ä¢ Failed: {failed_count}
‚Ä¢ Active users: {len(self.subscribers)}"""
        
        await status_msg.edit_text(final_text, parse_mode='Markdown')

    async def download_by_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        lang = self.user_language.get(user_id, 'ru')
        
        if user_id not in self.user_search_results:
            text = "‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞." if lang == 'ru' else "‚ùó Search for a song first."
            return await update.message.reply_text(text)

        try:
            idx = int(update.message.text) - 1
            tracks = self.user_search_results[user_id]
            if not 0 <= idx < len(tracks):
                text = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞." if lang == 'ru' else "‚ö†Ô∏è Invalid track number."
                return await update.message.reply_text(text)

            track = tracks[idx]
            loading_text = f"‚¨áÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {track['title']}" if lang == 'ru' else f"‚¨áÔ∏è Processing: {track['title']}"
            msg = await update.message.reply_text(loading_text)

            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            success_text = f"‚úÖ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω: {track['title']}\nüë§ {track['uploader']}\n‚è∞ {track['duration']}\n\n(–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è)" if lang == 'ru' else f"‚úÖ Track found: {track['title']}\nüë§ {track['uploader']}\n‚è∞ {track['duration']}\n\n(Demo mode - no actual download)"
            await msg.edit_text(success_text)
            
        except Exception as e:
            self.logger.error(f"Download error: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞." if lang == 'ru' else "‚ùå Track processing error."
            await update.message.reply_text(error_text)

    async def run_with_recovery(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        max_restarts = 10
        restart_delay = 5
        
        while self.restart_count < max_restarts:
            try:
                if not await self.initialize():
                    self.restart_count += 1
                    await asyncio.sleep(restart_delay)
                    continue
                
                await self.start_bot()
                break
                
            except (NetworkError, TelegramError) as e:
                self.restart_count += 1
                self.logger.warning(
                    f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ #{self.restart_count}: {e}. "
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥..."
                )
                await asyncio.sleep(restart_delay)
                
            except KeyboardInterrupt:
                self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
                
            except Exception as e:
                self.restart_count += 1
                self.logger.error(
                    f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ #{self.restart_count}: {e}. "
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥..."
                )
                await asyncio.sleep(restart_delay)
        
        if self.restart_count >= max_restarts:
            self.logger.critical(
                f"üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({max_restarts}). "
                "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
        
        await self.cleanup()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–µ—Ä
    keep_alive()
    
    bot = MusicTelegramBot()
    await bot.run_with_recovery()

    except KeyboardInterrupt:
        print("\nüõë –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
        - name: Run tests
  run: |
    pytest || true